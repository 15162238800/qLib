<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="qLib" label="qLib">
    <memberTool name="RealTimePlayback_qL"/>
    <memberTool name="ToggleIntegerFrames_qL"/>
    <memberTool name="AutonameNodes_qL"/>
    <memberTool name="ReferenceCopy_qL"/>
    <memberTool name="AttribDisplayMarkers_qL"/>
    <memberTool name="ToggleViewportBackgroundColor_qL"/>
    <memberTool name="ToggleViewportGuides_qL"/>
  </toolshelf>

  <tool name="ReferenceCopy_qL" label="Ref Copy qL" icon="BUTTONS_copy">
    <helpText><![CDATA[#icon: BUTTONS/copy
#context: obj
#type: tool

= Reference Copy qL =

*version 1*

"""Creates a Reference Copy where the reference source is easy to replace."""

This function is the same as the original _Reference Copy_ operation,
but it adds an extra parameter that specifies the source operator name
where all parameter values are referenced from.

This way the reference source is easy to change.


@usage Using Reference Copy

Select node(s) and click the shelf button.

@relnotes Release Notes

_version 1_ ---

2014-02-14:
    - Fixed serious bug (worked properly only on frame 1)
    - Uses `chsop()` now to get OP paths

2013-03-10:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[# do the dunno
#
import hou
import re

def postproc_refcopy(nodepath, srcpath):
    N = hou.node(nodepath)

    if N:

        # add ref_source parameter
        #
        N.addSpareParmTuple(
            hou.StringParmTemplate(
                "ref_source", "Ref Source", 1,
                string_type=hou.stringParmType.NodeReference
            )
        )

        N.parm('ref_source').set(srcpath)

        # process linkage expressions
        #
        parms = N.parms()
        for p in parms:
            try:
                if True:
                    for k in p.keyframes():
                        x = k.expression()
                        x = re.sub('"\.\./[^/]+', 'chsop("ref_source")+"', x)
                        k.setExpression(x, hou.exprLanguage.Hscript)
                        p.setKeyframe(k)

            except Exception as e:
                print "failed for param '%s'" % p.name()



# main
#
sel = [ n.path() for n in hou.selectedNodes() ]

for S in sel:
    c = len( hou.hscript( 'opls -d %s*' % S )[0].split() )
    T = '%s_copy%d' % (S, c)
    hou.hscript('opcp -c %s %s' % (S, T))
    postproc_refcopy(T, S)

]]></script>
  </tool>

  <tool name="AttribDisplayMarkers_qL" label="attr.vis" icon="BUTTONS_displayoptions">
    <helpText><![CDATA[#icon: BUTTONS/displayoptions
#context: obj
#type: tool

= Attrib Display Markers qL =

*version 1*

"""Creates display markers for all the attributes present on the displayed operator.
----
Shift-LMB: Clear previously built
Ctrl-LMB: Clear ALL markers then rebuild
Ctrl+Shift-LMB: Clear ALL markers
"""

This function builds visual display markers for all the attributes
that exist on the currently displayed operator.

(It can be considered as a shortcut to the similar function of the
[Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]'s
_Marker_ section.)

@usage Usage

((LMB)):
    Builds attribute markers for the current Display SOP.
    (Existing markers will also be rebuilt.)
((Shift + LMB)):
    Clears previously built attribute markers.
    (Markers not built with this function will be preserved.)
((Ctrl + LMB)):
    Clears _all_ markers (made by this tool or otherwise)
    and rebuilds the attribute marker list.
((Ctrl + Shift + LMB)) . :
    Deletes _all_ display markers. _All of them._


@related
    - [Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]
    - ...

@usage Using Add Display Markers

Set the Display flag on a node and click the shelf button. Then press
the `D` key in a Scene View, go to the Markers tab to see the generated
attribute markers ("Custom" section.)



]]></helpText>
    <script scriptType="python"><![CDATA[import hou
import toolutils


def ynreq(msg):
    return hou.ui.displayMessage(msg, ["Ok", "Cancel"]) == 0

def dispmsg(msg):
    hou.ui.setStatusMessage(msg)



def get_current_viewer_name():
    v = toolutils.sceneViewer()
    w = "%s.%s.world" % \
            (v.pane().desktop().name(), \
            v.name() )
    return w



def get_display_sop():
    v = None
    try:
        v = toolutils.sceneViewer()
        v = v.pwd() # OBJ object
        v = v.displayNode()
    except:
        v = None
        dispmsg("couldn't get Display (S)OP")
    return v



def clear_built_markers(kwargs=None, clearAll=False):
    if True: #ynreq("Clear %s display markers?" % "ALL" if clearAll else "generated"):
        for m in hou.hscript("viewoptls")[0].split():
            if clearAll or '_vis_' in m:
                print "viewoptrm %s" % m
                hou.hscript("viewoptrm %s" % m)





def build_markers(kwargs=None): # ( was create_markers() )
    """."""

    type_names = {
        hou.attribType.Point: "point",
        hou.attribType.Prim: "prim",
        hou.attribType.Vertex: "vertex"
    }

    type_labels = {
        hou.attribType.Point: "p:",
        hou.attribType.Prim: "pr:",
        hou.attribType.Vertex: "vt:"
    }

    pwd = get_display_sop()
    if pwd: dispmsg("display OP: %s" % pwd.path())
    else: return

    type_name  = lambda t: type_names[t]  if t in type_names  else ""
    type_label = lambda t: type_labels[t] if t in type_labels else ""
    p  = lambda n: pwd.parm(n).eval()
    ps = lambda n: pwd.parm(n).eval().strip()

    views = hou.hscript("viewls -n")[0].split()
    g = pwd.geometry()

    def to_as(attrs):
        return " ".join( [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ] )

    #force_tx  = ps('force_text').split()
    #vel_attrs = ps('vel_attribs').split()

    force_tx = 'P Cd uv'.split()
    vel_attrs = 'v accel'.split()

    scale_v   = 1.0 # vec scale
    scale_vel = (1/24.0) # velocity scale

    attrs_pt = to_as(g.pointAttribs())
    attrs_pr = to_as(g.primAttribs())
    attrs_vtx = to_as(g.vertexAttribs())

    #attrs_display = ps('markers_display').split()
    #if p('do_markers_display')==0: attrs_display = []

    CS = [
            (attrs_pt, g.findPointAttrib),
            (attrs_pr, g.findPrimAttrib),
            (attrs_vtx, g.findVertexAttrib)
        ]

    hue = 120.0
    color = hou.Color()

    for C in CS:

        attrs = C[0].split()
        find_attr_func = C[1] #g.findPointAttrib

        # add textual version of vector attrs
        attrs += [ ("text:%s" % v) for v in attrs if find_attr_func(v).size()==3 ]
        attrs = sorted(attrs)

        for name in attrs:

            tx = "text:" in name
            name = name.replace("text:", "")

            a = find_attr_func(name)
            if a and a.dataType() is not hou.attribData.String:
                opt_name = "_vis_%s_%d" % (name, tx, )
                size = a.size()
                is_xn = a.isTransformedAsNormal()
                is_xv = a.isTransformedAsVector()
                is_vect = size==3 and not tx # and name not in force_tx
                as_vel = name in vel_attrs
                scale = scale_vel if as_vel else scale_v
    
                label = "%s%s" % ( type_label(a.type()), name )
    
                if is_vect:
                    label += " [vec."
                    if as_vel: label += "/v."
                    if is_xn: label += "; xformed as normal"
                    if is_xv: label += "; xformed as vector"
                    label += "]"
                else:
                    pass # label += " (num)"
    
                print "--- %s: '%s'" % (name, label)
    
                # create/update marker
    
                hou.hscript('viewoptrm %s' % opt_name)
                hou.hscript('viewoptadd %s %s' % ('vector' if is_vect else 'text', opt_name))
    
                def vos(parm, val):
                    print ' --- viewoptset %s %s ( %s )' % (opt_name, parm, val)
                    hou.hscript('viewoptset %s %s ( %s )' % (opt_name, parm, val))

                if True:    
                    vos('attrib', a.name())
                    vos('class', type_name(a.type()))
                    vos('label', '"%s"' % label)
                    vos('overridecolor', '1')
                    color.setHSV((hue, 0.9, 0.9)); vos('color', '%f %f %f' % color.rgb())
                    color.setHSV((hue, 0.4, 1.0)); vos('selcolor', '%f %f %f' % color.rgb())
                    hue += 137.5 * 0.5

                if is_vect:
                    vos('scale', scale)

                if False: # name in attrs_display:
                    for view in views:
                        hou.hscript('viewoptenable %s all +%s' % (view, opt_name))
                    hue += 137.5/2.0

            else:
                print "couldn't find attribute %s" % name

    print "done. ------------"

'''
viewoptset
    vector_dunno
        arrow ( 0 )
        attrib ( N )
        class ( point )
        color ( 0 0 1 )
        icon ( SI_pointNormal )
        label ( "pr: primN (vector)" )
        overridecolor ( 0 )
        scale ( 1 )
        selcolor ( 0 0.45 1 )
        visibility ( 1 )
'''


print kwargs

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

clear_built_markers(kwargs, clearAll=ctrl)

if not shift:
    build_markers(kwargs)
]]></script>
  </tool>

  <tool name="ToggleIntegerFrames_qL" label="int.frames" icon="PLAYBAR_editable_keys">
    <helpText><![CDATA[#icon: PLAYBAR/editable_keys
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar."""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

m = not hou.playbar.usesIntegerFrames()
hou.playbar.setUseIntegerFrames(m)

hou.ui.setStatusMessage(" ---- Using Integer Frames: %s" % ("ON" if m else "OFF"))
]]></script>
  </tool>

  <tool name="ToggleViewportBackgroundColor_qL" label="BG Toggle" icon="COP2_invert">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Toggle Viewport Background Color qL =

*version 1*

"""Toggles between light and dark viewport color schemes."""

@bugs Limitations

- It doesn't work for the first time when the default background is dark (click twice)


@relnotes Release Notes

_version 1_ ---

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

v = toolutils.sceneViewer()
w = "%s.%s.world" % \
        (v.pane().desktop().name(), \
        v.name() )
#print "view:", w

if not hasattr(hou.session, "bg"):
    hou.session.bg = not True

hou.session.bg = not hou.session.bg
#hou.hscript("viewdisplay -B %s %s" % ("bw" if hou.session.bg else "wb", w, ))
hou.hscript("viewdisplay -B %s *" % ("bw" if hou.session.bg else "wb", ))
hou.ui.setStatusMessage("Set background to %s" % ("LIGHT" if hou.session.bg else "DARK") )]]></script>
  </tool>

  <tool name="AutonameNodes_qL" label="Auto-Name" icon="BUTTONS_comment_out">
    <helpText><![CDATA[#icon: BUTTONS/comment_out
#context: obj
#type: tool

= Autoname Nodes qL =

*version 1*

"""Set operator names based on its type and specific parameter settings and/or its context.
----
LMB: Automatically name selected OPs
Alt-LMB: Alternative naming (see help)
Ctrl-LMB: Reset name/color to defaults
"""

This function sets operator names, based on various criteria (operator type, parameter settings
and network connectivity context). Context is especially considered when naming Null OPs.

@usage Usage

There are several ways of invoking this function, when clicking on the shelf tool:

((LMB)):
    Auto-naming of selected operators.
((Alt + LMB)):
    Alternative auto-naming mode (see below).
((Ctrl + LMB)):
    Reset name and color of selected operators.


@method Auto-naming methods

*General*

Auto-naming follows the general guidelines:

- For most network container OPs it sets a default name
  (e.g. _SHADERS_ for a shopnet, etc).

- For operators that refer to an external file (alembic, etc)
  or another operator (e.g. Object Merge SOP), the name will
  contain the file or operator name.


*Null OPs*

For Null operators, the function will try to determine the role
of the null based on input/output connections, and name (and color)
it accordingly.

(TODO: finish this)

- mid-network:
  - named -> GEO_ prefix ('waypoint')
  - unnamed -> gets darker color if has multiple outputs ('crossroads')
- lonely null (no input/output): toggle between 'RENDER' (alt: 'DISPLAY') and regular null
- endpoint (has input, no output):
  - unnamed -> OUT (alt: DISPLAY)
  - named -> add OUT_ prefix



@todo To Do
    - Automatic coloring of network containers
    - Better support for Object Merge SOP


@relnotes Release Notes

_version 1_ ---

2014-02-20:
    - Added a more complex Null OP autonaming mechanism
    - Added other modes (reset, alternative)

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>qLib--Shelf</toolSubmenu>
    <script scriptType="python"><![CDATA[import hou
import re
import traceback



def name_null(node, altmode=False):
    '''.'''

    colors = {
        'normal':  hou.Color((0.80, 0.80, 0.80)),
        'red':     hou.Color((0.47, 0.00, 0.00)),
        'grey':    hou.Color((0.70, 0.70, 0.70)),
        'm-grey':  hou.Color((0.52, 0.52, 0.52)),
        'green':   hou.Color((0.00, 0.27, 0.00)),
        'render':  hou.Color((.4,.2,.6)),
        'display': hou.Color((0,.4,1)),
    }

    N = node
    n = N.name()

    tt = N.type().nameWithCategory()
    is_sop = tt=='Sop/null'
    is_dop = tt=='Dop/null'
    is_noname = re.search('^null', n) is not None

    if not is_sop and not is_dop:
        return

    n_ins  = len(N.inputs())
    n_outs = len(N.outputs())

    n0= n
    n = re.sub('^[A-Z]+[-_]+', '', n)
    c = None
    unique = True
    do_reset = False

    prefix = 'OP'
    if is_sop: prefix='GEO'
    if is_dop: prefix='DYN'

    if n_outs == 0:
        # bottom-of-network null
        print "--- bottom-of-network"
        if not is_sop: altmode=False
        if is_noname or n=='OUT' or n=='DISPLAY' or altmode:
            n, c = ('OUT', 'normal') if not altmode else ('DISPLAY', 'display')
            unique = False
        else:
            n = 'OUT_%s' % n
            c = 'green'

    else:
        # mid-network null
        print "--- mid-network"

        if not is_noname:
            # mid-network null already named,
            # just needs a prefix
            n = '%s_%s' % (prefix, n, )
            c = 'red'

        else:
            # unnamed mid-network null, skip
            if n_outs>1:
                c='m-grey'
            n = None


    if n_ins==0 and n_outs==0:
        # lonely null
        if is_sop:
            n1 = 'DISPLAY' if altmode else 'RENDER'
            c = n1.lower()
            if not n0.startswith(n1):
                n = n1
                #c = 'render'
                unique = False
            else:
                do_reset = True


    if do_reset:
        n = 'null1'
        c = 'normal'
        unique = True

    # perform rename
    #
    try:
        if n is not None and n!='':
            N.setName(n, unique_name=unique)
        if c in colors:
            N.setColor(colors[c])
    except:
        pass




pg = ('file', 'fileName', )

pd = {
    # general
    'shopnet': ('SHADERS', ),
    'chopnet': ('CHOPS', ),
    'cop2net': ('COMPOSITE', ),
    'ropnet': ('RENDER', ),
    # OBJs
    'instance': ('inst--', 'instancepath', ),
    'alembicarchive': ('abc--', 'fileName', ),
    'alembicxform': ('abcxform--', 'fileName', ),
    'qLib::alembic_xform_ql::1': ('abcxform--', 'fileName', ),
    # SOPs
    'object_merge': ('objm--', 'objpath1', 'group1', ),
    'alembic': ('abc_', 'fileName', ),
}


def autoname_selected_nodes(reset=False, altmode=False):
    '''.'''

    print "\nAutonaming selected nodes..."
    
    for N in hou.selectedNodes():
    
        name = None
        P = N.path()
        T = N.type().name()
    
        print " - node: %s (%s)" % (P, T, )

        if reset:
            name = N.name()
            if not name.startswith(T):
                N.setName('%s1' % T, unique_name=True)
                N.setColor(hou.Color((0.8, 0.8, 0.8)))
            continue

        if T=='null':
            name_null(N, altmode=altmode)
            continue
    
        if T in pd:
            pdt = pd[T]

            # TODO: handle object_merge SOP as special case
            # ("fuller" path for SOPs)
    
            if len(pdt)>1:
                name = N.parm(pdt[1]).eval()
                # TODO: if path points to SOP, include parent OBJ (object_merge)
                name = re.search("[^/\\\\]+$", name).group(0) # pop any path
                name = '%s%s_1' % (pdt[0], name, )
            else:
                name = pdt[0]
    
        if name is None:
            for p in pg:
                if N.parm(p):
                    name = N.parm(p).eval()
    
        if False:
            if N.parm("file"):
                # alembic archive (anything with a .fileName parameter)
                n = N.parm("file")
                name = n.evalAsString()
        
            elif N.parm("fileName"):
                # alembic archive (anything with a .fileName parameter)
                n = N.parm("fileName")
                name = n.evalAsString()
                #$name = re.sub("\.abc$", "", name)
                #name = re.sub("_v[0-9]+$", "", name)
    
        # TODO: geo w/ single alembic node in it
    
        print " -- name:", name
    
        if name:
            # strip any path from it
            name = re.search("[^/\\\\]+$", name).group(0)
            print " -- name:", name
    
            try:
                N.setName(name, unique_name=True)
            except:
                print "OOPS:", traceback.format_exc()
    


shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

autoname_selected_nodes(reset=ctrl, altmode=alt)

]]></script>
  </tool>

  <tool name="RealTimePlayback_qL" label="realtime" icon="PLAYBAR_realtime">
    <helpText><![CDATA[#icon: PLAYBAR/realtime
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar.
----
LMB: Enable real-time playback
Shift-LMB: Disable real-time playback
"""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

hou.playbar.setRealTime( not kwargs['shiftclick'] )]]></script>
  </tool>

  <tool name="ToggleViewportGuides_qL" label=".: guides :." icon="IMAGE_view_guides">
    <helpText><![CDATA[#icon: IMAGE/view_guides
#context: obj
#type: tool

= Toggle Viewport Guides qL =

*version 1*

"""Toggles OP guide display in the viewports."""

@bugs Limitations

- It might behave inconsistently between viewports (and needs to be clicked twice)


@relnotes Release Notes

_version 1_ ---

2014-03-20:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

v = toolutils.sceneViewer()
w = "%s.%s.world" % \
        (v.pane().desktop().name(), \
        v.name() )
#print "view:", w

if not hasattr(hou.session, "guides"):
    hou.session.guides = True

hou.session.guides = not hou.session.guides
#hou.hscript("viewdisplay -g %s %s" % ("on" if hou.session.guides else "off", w, ))
hou.hscript("viewdisplay -g %s *" % ("on" if hou.session.guides else "off", ))
hou.ui.setStatusMessage("Geometry guides are now %s" % ("DISPLAYED" if hou.session.guides else "OFF") )]]></script>
  </tool>
</shelfDocument>
